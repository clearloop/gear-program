#!/bin/bash
#
# Generate and update gear-node api.

readonly ROOT_DIR="$(cd "$(dirname "$0")"/.. && pwd)"
readonly RESOURCE_DIR="${ROOT_DIR}/res"
readonly GEAR_NODE_DOCKER_IMAGE='ghcr.io/gear-tech/node:latest'
readonly GEAR_NODE_BIN="${RESOURCE_DIR}/gear-node"
readonly GENERATED_RS="${ROOT_DIR}/src/api/generated.rs"
readonly RPC_PORT='9933'

#################
# Generated header
###################
function generate-header() {
    cat <<EOF
//! Auto generated by subxt-cli
//!
//! subxt codegen | rustfmt --edition=2021
//!
//! spec_version: $1
#![allow(clippy::all)]
#![allow(missing_docs)]
EOF
}

######################
# Usage of this script.
########################
function usage() {
    cat 1>&2 <<EOF
generate-api
Generate gear-node api.

USAGE:
    generate-api
EOF
}

function download-gear() {
    url='https://builds.gear.rs/gear-nightly-linux-x86_64.tar.xz'
    if [[ "$(uname)" == 'Darwin' ]]; then
        if [[ "$(uname -m)" == 'arm64' ]]; then
            url='https://builds.gear.rs/gear-nightly-macos-m1.tar.gz'
        else
            url='https://builds.gear.rs/gear-nightly-macos-x86_64.tar.gz'
        fi
    fi

    # Doesn't support Win for now.
    curl "${url}" | tar xzvf - -C "${RESOURCE_DIR}"
}

#############################################################
# Check if the required binaries are installed in the machine.
###############################################################
function pre-check() {
    if ! [ -f "${GEAR_NODE_BIN}" ]; then
        echo 'gear-node not found, downloading...';
        download-gear
    fi

    if ! [ -x "$(command -v cargo)" ]; then
        echo 'cargo not found, installing rust...';
        curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
    fi

    if ! [ -x "$(command -v subxt)" ]; then
        echo 'subxt not found, installing subxt...';
        cargo install subxt-cli
    fi

    if ! [ -x "$(command -v rustfmt)" ]; then
        echo 'rustfmt not found, installing rustfmt...';
        rustup component add rustfmt
    fi
}


################
# Run gear-node.
##################
function spec-version() {
    spec_version=''

    # Pipe the stderr to read line in sub-shell
    ${GEAR_NODE_BIN} --tmp --dev --rpc-port ${RPC_PORT} 2>&1 > /dev/null |
        while [ "${spec_version}" == '' ] ; do
            read -r line
            if [[ "$line" == *"gear-"* ]]; then
                spec_version="$(echo ${line} | grep -Eo 'gear-[0-9]{3}' | sed 's/.*-//')"
                break
            fi
        done &

    # TODO
    #
    # Optimize this double-while-loop if possible.
    while ! [ "${spec_version}" == '' ]; do
        kill -- -$!
    done

    echo "${spec-version}"
}

#########################################
# Generate rust code for the gear-node api.
############################################
function main() {
    if [ "$#" -ne 0 ]; then
        usage
        exit 0
    fi

    # 0. Check if the required commands exist.
    pre-check

    # 1. Run gear-node and capture stderr line by line
    spec_version="$(spec-version)"

    # 2. generate header and code
    generate-header "${spec_version}" > "${GENERATED_RS}"
    subxt codegen --url "http://0.0.0.0:${RPC_PORT}" | rustfmt --edition=2021 >> "${GENERATED_RS}"

    kill -9 "${pid}" &> /dev/null

    echo "Updated gear-node api in ${GENERATED_RS}." >&2
    exit 0
}

main "$@"
